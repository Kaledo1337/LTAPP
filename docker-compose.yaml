version: '3.7'

services:
  postgres:
    image: postgres:16
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_HEAP_OPTS: "-Xmx512M -Xms256M"
    healthcheck:
      test: [ "CMD-SHELL", "echo stat | nc -w 2 localhost 2181 | grep -q Mode || exit 0" ]
      interval: 15s
      timeout: 20s
      retries: 10
      start_period: 15s  # Увеличенный период для инициализации
  kafka:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
        zookeeper:
          condition: service_healthy
    ports:
        - "9092:9092"
        - "29092:29092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_BROKER_ID: 1  # Добавляем явный broker ID
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_HEAP_OPTS: "-Xmx512m -Xms256m"
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: [ "CMD-SHELL", "kafka-broker-api-versions --bootstrap-server kafka:9092 || exit 0" ]
      interval: 20s
      timeout: 20s
      retries: 10
      start_period: 20s  # Даём Kafka больше времени на запуск


  app:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/postgres
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yaml:/etc/prometheus/prometheus.yaml
    depends_on:
      - app

  grafana:
    image: grafana/grafana
    ports:
       - "3000:3000"
    volumes:
       - grafana_data:/var/lib/grafana
    depends_on:
       - prometheus
  # Node Exporter (системные метрики CPU, RAM, Disk)
  node-exporter:
    image: prom/node-exporter
    command:
      - "--path.rootfs=/host"
      - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|run|var/lib/docker/.+)($$|/)"
      - "--collector.diskstats.ignored-devices=^(ram|loop|fd|(h|s|v|xv)d[a-z]|nvme\\d+n\\d+p)\\d+$$"
    volumes:
      - "/:/host:ro,rslave"
      - "/run/udev:/run/udev:ro"  # Добавлено для исправления ошибки udev
    pid: "host"  # Доступ к данным процессов
    network_mode: "host"  # Доступ к сетевым интерфейсам
    restart: unless-stopped
  # Kafka Exporter (метрики Kafka)
  kafka-exporter:
    image: danielqsj/kafka-exporter
    environment:
      KAFKA_BROKERS: "kafka:9092"
    ports:
      - "9308:9308"
    depends_on:
      - kafka

  # PostgreSQL Exporter
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:password@postgres:5432/postgres?sslmode=disable"
    ports:
      - "9187:9187"
    depends_on:
      - postgres

volumes:
  kafka_data:
  postgres_data:
  grafana_data: